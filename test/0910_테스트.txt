[ java 6강 - 2 차 테스트]


1. 상속이란?
부모 클래스를 자식 클래스가 자기 것처럼 가져다 쓸 수 있는 것


2. 해당하는 자식 클래스에 대한 용어를 쓰시오
상위(super) 클래스 - 기본 (base) 클래스, 부모 클래스, 조상 클래스
sub클래스??
이거 문제가 무슨 뜻인지 모르겠습니다...


3. 자식 클래스의 멤버 개수는 부모 클래스와  ( 같거나 많다 )

4. 상속의 형식을 쓰시오.
class 클래스명 extends 부모클래스명
패키지가 달라도 상속이면 적용가능



5. protected 에 대해 설명하시오.
자식 클래스에게만 public처럼 적용되며 나머지에는 디폴트와 비슷하게 작동한다. 자식에게만 멤버 노출시킴


6. 부모의 protected 멤버필드는 실행 타임에는 (  default   ) 이면서 자식에게는 완전한 (  public   ) 이 된다.
객체의 메모리를 생성한 후 점(.)찍고 접근할 때는 완벽한 ( default ) 이면서 
상속관계의 클래스 디자인타임에는 완벽한 (  public  ) 이다.
클래스 외부에서 보면 ( default  ) 로 보이고, 상속의 관계에서 보면 ( public  ) 으로 보임


7. 상속에서 생성자가 실행되는 순서는?
최상위클래스부터 차례대로

8. 자바에서 클래스는 (  중복상속   ) 을 할 수 없고 단일 상속만이 가능하다.


9. 모든 클래스 상속계층도의 제일 위에 위치하는 조상 클래스는?
Object


10. 기본형 매개변수와 참조형 매개변수를 비교하여 설명하시오.
값만 얻음 vs 주소가 복사됨
읽기전용 Vs 읽고 수정 가능

 
11. 출력값을 예측하시오.

class Data { 
	int x; 
}

class ParameterTest2 {
	public static void main(String[] args) {
		Data d = new Data();
		d.x = 100;
		System.out.println("main() : x = " + d.x);  // 100

		change(d);
		System.out.println("After change(d), main() : x = " + d.x);  // 30

	}

	public static void change(Data d) { 
		d.x = 30;
		System.out.println("change() : x = " + d.x);  // 30
	}
}

12.출력값을 예측하시오.

class Data {
	int x; 
}

class ParameterTest {
	public static void main(String[] args) {
		Data d = new Data();
		d.x = 8;
		System.out.println("main() : x = " + d.x);  //8

		change(d.x);
		System.out.println("After change(d.x), main() : x = " + d.x);  //8
	}

	static void change(int x) {  // 기본형 매개변수
		x = 95;
		System.out.println("change() : x = " + x);  //95
	}
}


13. Rect 클래스 만들기
멤버변수 - 가로(width), 세로(height)
생성자
사각형 넓이 구하는 메서드

class Rect {
	private int width;
	private int height;
	
	Rect(int width, int height) {
		this.height = height;
		this.width = width;
	}
	
	public int RectArea() {
		return width*height;
	}
}


14. main()에서 4개의 요소를 갖는 Rect 배열을 만들고, 사용자 입력값을 이용하여 배열을 초기화한 후 
사각형의 넓이를 구하는 메서드를 호출하고, 결과를 출력하시오.
(클래스 배열 예제, 반복문 이용)
class Rectangle {
	private int width;
	private int height;
	
	Rectangle(int width, int height) {
		this.height = height;
		this.width = width;
	}
	
	public int RectArea() {
		return width*height;
	}
}

class ParameterTest2 {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		
		int[] Rect = new int[4];
		
		for(int i=0; i<Rect.length; i++) {
			System.out.println("두 수 입력");
			int a = sc.nextInt();
			int b = sc.nextInt();
			
			Rectangle re = new Rectangle(a, b);
			System.out.println("넓이"+re.RectArea());
		}
	}
}




[ java 7강 - 1차 테스트]

1. 자바 가상머신의 메모리 모델에 대해 설명하시오
메모리를 어떤 데이터냐에 따라 나눠보관
메서드/스택/힙으로 나눔

2. 호출스택의 특징에 대한 설명이다. ()에 알맞는 내용을 쓰시오.

 메서드가 호출되면 수행에 필요한 만큼의 메모리를 스택에 할당 받는다
 메서드가 수행을 마치고 나면 사용했던 메모리를 반환하고 스택에서 제거된다.
 호출 스택의 (  제일 위에   )에 위치하는 메서드가 현재 진행 중인 메서드이며, 
 나머지는 대기 상태에 있게 된다.


3. 오버로딩과 오버라이딩에 대해 설명하시오.
오버라이딩의 조건도 설명하시오(접근 제한자, 예외)
오버로딩 -> 한 클래스 내에서 동일명의 메서드 존재
오버라이딩-> 부모 클래스에서 상속받은 메서드의 재용을 바꿔버림

접근제한자는 무조건 부모 클래스와 같거나 더 크게, 예외 선언아 불가능한


4. this와 super 를 비교하여 설명하시오.
거진 비슷한 기능. super은 부모의 생성자를 호출함 this는 자기자신 호출

5. 한 생성자에서 다른 생성자를 호출할 때는 반드시 (  첫번째줄  )에서만 호출이 가능하다.

6.  (1) 의 코드를 완성하시오

class Car {
	private String color;	// 색상
	private String gearType;	// 변속기 종류 - auto(자동), manual(수동)
	private int door;		// 문의 개수

	Car() {
		color = "gray";
		gearType = "수동";
		door = 2;

	}
	Car(String color, String gearType, int door) {
		this.color = color;
		this.gearType = gearType;
		this.door = door;
	}
	public void showInfo(){
		System.out.println("color:" + color + ", gearType:" + gearType+ ", door:"+door);
	}
}

7. this나 super는 (  static  )에서는 사용할 수 없다.


8. 상속을 받았을 경우 부모클래스의 생성자가 (   매개변수를 지녔다   )면 
자식은  (   이 매개변수를 직접 넣어줘ㅑ야    ) 한다.


9. Object 클래스를 제외한 모든 클래스의 생성자 첫 줄에는 생성자
(같은 클래스의 다른 생성자 또는 부모의 생성자)를 호출해야 한다. 
그렇지 않으면 (        컴파일러가 자동으로 super 불여버림          )



10.  컴파일러에 의해 자동으로 삽입되는 생성자를 직접 작성하시오.

class Test{
	int age;
	Test(int age) {
		this.age=age;
	}

}

class AAA extends Test{
	int num;
	AAA(int age, int num) {
		super(age);
		this.num = num;
	}

}

class BBB extends Test{
	String name;

	BBB(int age, String name){	
		super(age);
		name="홍길동";
	}
}






--------------------------------------
정답

[ java 6강 - 2차 테스트]


1. 상속이란?
이미 만들진 클래스의 멤버들을 물려받아 새로운 클래스를 정의하는 기법
클래스를 상속받게 되면 상위(부모) 클래스 내부의 멤버들을 가져다가 사용할 수 있음
공통되는 부분을 부모 클래스로 추상화하고, 이를 상속하면서 각각의 특징을 드러낼 수 있도록 자식 클래스 정의
자식 클래스들의 공통적인 부분은 부모 클래스에서 관리하고, 자식 클래스는 자신에 정의된 멤버들만 관리


2. 해당하는 자식 클래스에 대한 용어를 쓰시오
상위(super) 클래스 - 기본 (base) 클래스, 부모 클래스, 조상 클래스
하위(sub) 클래스 - 파생 (derived) 클래스, 자식 클래스, 자손 클래스


3. 자식 클래스의 멤버 개수는 부모 클래스와  ( 같거나 많다. )


4. 상속의 형식을 쓰시오.

class   클래스 이름   extends   부모 클래스


5. protected 에 대해 설명하시오.
  같은 패키지는 물론 다른 패키지일지라도 상속 관계가 있으면 접근 가능
   (상속받은 자식 클래스에서 접근 가능) 
다른 패키지에 존재할지라도 상속관계에 놓이면 접근을 허용


6. 부모의 protected 멤버필드는 실행 타임에는 ( default ) 이면서 자식에게는 완전한 ( public ) 이 된다.
객체의 메모리를 생성한 후 점(.)찍고 접근할 때는 완벽한 ( default ) 이면서 
상속관계의 클래스 디자인타임에는 완벽한 ( public ) 이다.
클래스 외부에서 보면 ( default ) 로 보이고, 상속의 관계에서 보면 ( public ) 으로 보임


7. 상속에서 생성자가 실행되는 순서는?
메모리는 최상위클래스부터 차례대로 생성됨
해당 클래스가 상속 받은 모든 상위레벨의 생성자가 차례대로 호출 되어지고, 제일 마지막에 자신의 것이 호출된다.


8. 자바에서 클래스는 ( 중복상속, 다중 상속 ) 을 할 수 없고 단일 상속만이 가능하다.


9. 모든 클래스 상속계층도의 제일 위에 위치하는 조상 클래스는?
Object 클래스


10. 기본형 매개변수와 참조형 매개변수를 비교하여 설명하시오.

기본형 매개변수 - 변수의 값을 읽기만 할 수 있다. (read only)
  메서드에서 매개변수의 값을 변경해도 메서드를 호출한 곳에서는 영향 받지 않는다.	
   - call by value

 참조형 매개변수 - 변수의 값을 읽고 변경할 수 있다.(read & write)
  메서드에서 매개변수의 값을 변경하면 메서드를 호출한 곳에서도 영향 받는다.	
   - call by reference

11. 출력값을 예측하시오.

class Data { 
	int x; 
}

class ParameterTest2 {
	public static void main(String[] args) {
		Data d = new Data();
		d.x = 100;
		System.out.println("main() : x = " + d.x);  //100

		change(d);
		System.out.println("After change(d), main() : x = " + d.x);  //30

	}

	public static void change(Data d) { 
		d.x = 30;
		System.out.println("change() : x = " + d.x);  //30
	}
}

12.출력값을 예측하시오.

class Data {
	int x; 
}

class ParameterTest {
	public static void main(String[] args) {
		Data d = new Data();
		d.x = 8;
		System.out.println("main() : x = " + d.x);  //8

		change(d.x);
		System.out.println("After change(d.x), main() : x = " + d.x);  //8
	}

	static void change(int x) {  // 기본형 매개변수
		x = 95;
		System.out.println("change() : x = " + x);  //95
	}
}

13. Rect 클래스 만들기
멤버변수 - 가로(width), 세로(height)
생성자
사각형 넓이 구하는 메서드

14. main()에서 4개의 요소를 갖는 Rect 배열을 만들고, 사용자 입력값을 이용하여 배열을 초기화한 후 
사각형의 넓이를 구하는 메서드를 호출하고, 결과를 출력하시오.
(클래스 배열 예제, 반복문 이용)

import java.util.Scanner;

class Rect{
	//멤버변수
	private double width, height;
		
	Rect(double width, double height)
	{
		this.width=width;
		this.height=height;
	}
	
	//메서드
	public double findArea()	// 넓이 구하기
	{
		return width * height;
	}
	
}

public class Exam{
	public static void main(String[] args)	{
		Rect[] arr = new Rect[4];

		for (int i=0;i<arr.length ;i++ ){
			System.out.println("가로, 세로를 입력하세요");	
			Scanner sc = new Scanner(System.in);
			int w = sc.nextInt();
			int h = sc.nextInt();

			arr[i]=new Rect(w, h);
		}
		
		System.out.println("\n=====모든 사각형의 면적======");
		for (int i=0;i<arr.length ;i++ ){
		     System.out.println("사각형의 넓이 : " +  arr[i].findArea());
		}//for		
	}
} 



[ java 7강 - 1차 테스트]

1. 자바 가상머신의 메모리 모델에 대해 설명하시오
자바 가상머신은 운영체제로부터 할당 받은 메모리 공간의 효율적인 사용을 위해 
수납장처럼 메모리 공간을 나눠서 데이터의 특성에 따라 분류해서 저장한다.
자바 가상머신은 메모리 공간을 크게 세 개의 영역으로 나누어 관리한다.

1) 메서드 영역 - 메서드의 바이트 코드, static 변수를 저장한다.

2) 호출 스택 영역 - 지역변수, 매개변수를 저장한다.
메서드의 작업에 필요한 메모리 공간을 제공한다.
메서드가 호출되면, 호출스택에 호출된 메서드를 위한 메모리가 할당되며, 
이 메모리는 메서드가 작업을 수행하는 동안 지역변수(매개변수 포함)들과 
연산의 중간 결과 등을 저장하는 데 사용된다.
메서드가 작업을 마치면 할당되었던 메모리 공간은 반환되어 비워진다.

3) 힙 영역 - 인스턴스가 생성되는 공간이다


2. 호출스택의 특징에 대한 설명이다. ()에 알맞는 내용을 쓰시오.

 메서드가 호출되면 수행에 필요한 만큼의 메모리를 스택에 할당 받는다
 메서드가 수행을 마치고 나면 사용했던 메모리를 반환하고 스택에서 제거된다.
 호출 스택의 (제일 상위)에 위치하는 메서드가 현재 진행 중인 메서드이며, 
 나머지는 대기 상태에 있게 된다.


3. 오버로딩과 오버라이딩에 대해 설명하시오.
오버라이딩의 조건도 설명하시오(접근 제한자, 예외)

오버로딩 메서드란
하나의 클래스내에서 동일한 이름을 가진 여러 개의 메서드로써
메서드 이름이 동일하더라도 매개변수의 개수나 매개변수의 자료형(type)이 다를 경우, 별개의 메서드로 인정하는 것

오버라이딩이란
부모 클래스로부터 상속받은 메서드의 내용을 변경하는 것
메서드 재정의

오버라이딩은 메서드의 내용만을 새로 작성하는 것이므로 메서드의 선언부는 부모의 것과 완전히 일치해야 한다.
접근 제한자와 예외(Exception)는 제한된 조건 하에서만 다르게 변경할 수 있다.
1. 접근 제한자는 부모 클래스의 메서드보다 좁은 범위로 변경할 수 없다.
2. 부모 클래스의 메서드보다 많은 수의 예외를 선언할 수 없다.


4. this와 super 를 비교하여 설명하시오.
 자신의 멤버를 참조하는 this => this.멤버
 생성자를 호출하는 this() => 같은 클래스의 다른 생성자를 호출할 때 사용한다.

 부모의 멤버를 참조하는 super => super.멤버, 부모의 멤버와 자신의 멤버를 구별하는 데 사용된다
 부모 생성자를 호출하는 super() 


5. 한 생성자에서 다른 생성자를 호출할 때는 반드시 (첫 줄)에서만 호출이 가능하다.


6.  (1) 의 코드를 완성하시오

class Car {
	private String color;		// 색상
	private String gearType;	// 변속기 종류 - auto(자동), manual(수동)
	private int door;			// 문의 개수

	Car() {
		(1) 회색, 수동, 문 2개인 차로 셋팅

		this("silver", "manual", 2);	
	}
	Car(String color, String gearType, int door) {
		this.color = color;
		this.gearType = gearType;
		this.door = door;
	}
	public void showInfo(){
		System.out.println("color:" + color + ", gearType:" + gearType+ ", door:"+door);
	}
}

7. this나 super는 (static 메서드)에서는 사용할 수 없다.


8. 상속을 받았을 경우 부모클래스의 생성자가 (매개변수를 가지고 있다)면 
자식은  (부모의  생성자에게  매개변수를  넣어줘야) 한다.


9. Object 클래스를 제외한 모든 클래스의 생성자 첫 줄에는 생성자
(같은 클래스의 다른 생성자 또는 부모의 생성자)를 호출해야 한다. 
그렇지 않으면 ( 컴파일러가 자동적으로 super(); 를 생성자의 첫 줄에 삽입한다. )



10.  컴파일러에 의해 자동으로 삽입되는 생성자를 직접 작성하시오.

class Test{
	int age;

	Test(){
		super();
	}	
}

class AAA extends Test{
	int num;

	AAA(){
		super();
	}
}

class BBB extends Test{
	String name;

	BBB(){
		super();
		name="홍길동";
	}
}






