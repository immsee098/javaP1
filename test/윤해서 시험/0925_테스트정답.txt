[ java 15강 - 2차 테스트]

1. StringTokenizer는 긴 문자열을 지정된 구분자를 기준으로 토큰(token) 이라는 여러 개의 작은 문자열로 
잘라내는 데 사용된다.
String 클래스의 ( split() ) 메서드를 사용한 것과 유사하다.
StringTokenizer 는 구분자로 (단 하나의 문자) 밖에 사용하지 못한다.


2. (1), (2)에 코드를 완성하시오.

import java.util.*; 

class StringTokenizerEx1 { 
      public static void main(String[] args) { 
		String source = "100,200,300,400";
		
		//(1) StringTokenizer를 이용하여 ,를 구분자로 분리하여 출력

		StringTokenizer st = new StringTokenizer(source, ",");

		while(st.hasMoreTokens()){
			System.out.println(st.nextToken());
		}

		//(2) split() 메서드를 이용하여 동일 결과가 나오도록 할 것

		String[] arr = source.split(",");
		for (String s:arr ){
			System.out.println(s);
		}
      } 
}

3. (1), (2)에 코드를 완성하시오.

import java.util.*; 

class StringTokenizerEx3 { 
	public static void main(String args[]) { 
		String source =
                       "1,김길재,70,100,88|2,박길동,95,80,90|3,이길수,80,90,90";

		//(1) 두 개의 StringTokenizer 와 이중 반복문을 사용해서 처리한 후 출력

		StringTokenizer st = new StringTokenizer(source, "|"); 
		while(st.hasMoreTokens()) {
			String token = st.nextToken();

			StringTokenizer st2 = new StringTokenizer(token, ","); 
			while(st2.hasMoreTokens()) {
				System.out.println(st2.nextToken());
			}
			System.out.println("------");
		}

		//(2) split() 메서드를 이용하여 동일 결과가 나오도록 할 것

		String[] arr = source.split("\\|");
		for (String s:arr ){			
			String[] arr2 = s.split(",");
			for (int j=0;j<arr2.length ;j++ ){
				System.out.println(arr2[j]);
			}
			System.out.println("------");
		}
	} // main
}


4. ( split() ) 는 빈 문자열도 토큰으로 인식하는 반면
( StringTokenizer ) 는 빈 문자열을 토큰으로 인식하지 않기 때문에 인식하는 토큰의 개수가 서로 다르다.


5. Object 클래스의 toString() 메서드의 결과는  클래스명@16진수 해시코드  이다.
이를 Object의 메서드로 표현하시오.

 getClass().getName() + '@' + Integer.toHexString(hashCode())


6. 연산자 == 은 기본 자료형에서는 (값)이 같은지 비교하고,
참조 자료형에서는 (주소값)을 비교한다.

7. String 클래스의 equals() 메서드는 (값)이 같은지 비교한다.
Object 클래스의 equals() 메서드를 오버라이딩하여 (문자열 값)을 비교하도록 한 것이다.

8. Object 클래스의 equals() 메서드는 매개변수로 객체의 참조변수를 받아서 비교하여 
그 결과를 boolean 으로 알려주는 역할을 하는데, 두 객체의 같고 다름을 참조변수의 값으로 판단한다.
즉, (주소값)을 비교한다.


9. Person 클래스의 equals 메서드를 오버라이딩하여 id 값이 같으면 같은 인스턴스로 인식하도록 코드를
완성하시오.

class Person {
	private long id;

	Person(long id) {
		this.id = id;
	}

	//(1) equals 오버라이딩

	public boolean equals(Object obj) {
		if(obj!=null && obj instanceof Person) {
			return id ==((Person)obj).id; 
		} else {
			return false; 
		}
	}

	
}

class Exam {
	public static void main(String[] args){
		Person p1 = new Person(9011081111222L);
		Person p2 = new Person(9011081111222L);

		if(p1.equals(p2)) {
			System.out.println("p1과 p2는 같은 사람입니다.");
		} else {
			System.out.println("p1과 p2는 다른 사람입니다.");
		}

	}
}



10. Object클래스의 hashCode()메서드는 해싱기법에 사용되는 해시함수를 구현한 것인데,
리턴하는 값은 무엇인가?

객체의 주소값을 이용해서 해시코드(인스턴스의 주소와 관련된 정수값)를 만들어 반환

11. 맞으면 O, 틀리면 X 를 표시하시오.
- 같은 인스턴스라면 hashCode 메서드를 호출했을 때의 결과값인 해시코드도 같아야 한다. (  O  ) 
- 서로 다른 인스턴스는 서로 다른 해시코드값을 가진다. ( O ) 
- String 클래스는 문자열의 내용이 같으면, 동일한 해시코드를 반환하도록 hashCode 메서드를 오버라이딩하였다. ( O )


12. Object 클래스의 hashCode 메서드처럼 객체의 주소값으로 해시코드를 생성하는 메서드는
( System.identityHashCode(Object x) ) 인데, 이 메서드는 모든 객체에 대해 항상 다른 해시코드값을 반환한다.


13. 아래 코드에서 동일한 결과값을 얻는 부분을 표시하시오.
class Exam {
	public static void main(String[] args) {
		String str1=new String("abc");
		String str2=new String("abc");

		String str3="abc";
		String str4="abc";
		
		System.out.println(str1.hashCode());  //(1)
		System.out.println(str2.hashCode());  //(2)
		System.out.println(str3.hashCode());  //(3)
		System.out.println(str4.hashCode());  //(4)

		System.out.println(System.identityHashCode(str1)); //(5)
		System.out.println(System.identityHashCode(str2)); //(6) 
		System.out.println(System.identityHashCode(str3)); //(7) 
		System.out.println(System.identityHashCode(str4)); //(8) 
	}
}

1,2,3,4 는 문자열의 내용이 같으므로 동일한 해시코드 값을 얻는다
7,8 은 동일 문자열이므로 하나의 인스턴슴나 생성되어 같이 공유하므로, 동일 주소


14. 맞으면 O, 틀리면 X 를 표시하시오.
- Object 클래스의 clone() 메서드는 자신을 복제하여 새로운 인스턴스를 생성하는 일을 한다. ( O )
- 배열이나 인스턴스가 멤버로 정의되어 있는 클래스의 인스턴스도 완전한 복제가 이루어진다. ( X )


15. ( )에 공통으로 들어갈 내용을 쓰시오.
( Cloneable ) 인터페이스를 구현한 클래스의 인스턴스만 clone() 을 통한 복제가 가능하다.
인스턴스 복제는 데이터를 복사하는 것이기 때문에 데이터를 보호하기 위해서, 
클래스 작성자가 복제를 허용하는 경우, ( Cloneable ) 인터페이스를 구현한 경우에만 복제가 가능하도록 하기 위해서이다.


16. 맞으면 O, 틀리면 X 를 표시하시오.
- finalize() 메서드는 인스턴스가 소멸되기 직전에 자바 가상머신에 의해서 자동으로 호출되는 메서드이다. ( O )
- 빈번한 가비지 컬렉션은 프로그램 성능에 문제를 줄 수 있어서, 
   특정 알고리즘을 통해서 계산된 시간에 가비지 컬렉션이 수행된다.  ( O )
- System.runFinalization()  메서드는 명시적으로 가비지 컬렉션을 수행시키는 메서드이다. ( X )
- 완전한 소멸이 유보된 인스턴스들의 finalize 메서드 호출을 위해 System.gc() 메서드를 요청해야 한다. ( X )


17. 어떤 인스턴스가 GC의 소멸 대상이 되는지 (1),(2),(3)에 쓰시오.

class MyName{
	String objName;
	public MyName(String name){
		objName=name;
	}	
	protected void finalize() throws Throwable{  
		super.finalize();
		System.out.println(objName+"이 소멸되었습니다.");
	}
}
class ObjectFinalize{	
	public static void main(String[] args){
		MyName obj1=new MyName("인스턴스1");
		MyName obj2=new MyName("인스턴스2");

		obj1=obj2;  //(1) obj1이 가리키던 인스턴스1이 gc대상이 됨
		obj2=null;	 //(2) 여전히 obj1이 인스턴스2를 가리키고 있다
		obj1=null;  //(3) obj1이 가리키던 인스턴스2가 소멸 대상

		System.out.println("프로그램을 종료합니다.");
		System.gc();
		System.runFinalization();
	}
}


18. static import 문을 사용하면 static 멤버를 호출할 때 ( 클래스명 )을 생략할 수 있다.


19. 아래 코드에서 (1), (2)에 static import 문이 적용된 동일한 코드를 작성하시오.

import static java.lang.System.out;
import static java.lang.Math.random;
import static java.lang.Math.PI;

class Exam{
	public static void main(String[] args) {	
		System.out.println(Math.random());
		//(1)
		out.println(random());

		System.out.println("Mah.PI :"+Math.PI);
		//(2)
		out.println("Mah.PI :"+PI);
	}
}


20. 내부 클래스란?
클래스 내에 선언된 클래스로, 
주로 AWT나 Swing과 같은 GUI 어플리케이션의 이벤트 처리에 사용된다.


21. 내부 클래스의 종류 3가지를 쓰시오
인스턴스 클래스
static 클래스
지역 클래스


22. 맞으면 O, 틀리면 X 를 표시하시오.
- 내부 클래스의 선언위치에 따라 같은 선언위치의 변수와 동일한 유효범위(scope)와 접근성을 갖는다. ( O )
- 내부 클래스도 클래스이기 때문에 abstract 나 final 과 같은 제어자를 사용할 수 있다. ( O )
- 내부 클래스도 private, protected 접근 제어자는 사용할 수 없다. ( X ) 



23. 컴파일 에러가 발생하는 부분을 표시하고, 이유를 설명하시오.

class Exam { 
      class InstanceInner { 
            int iv = 100; 
//          static int cv = 100;             // 에러 : static클래스가 아니면 static변수를 선언할 수 없다. 
            final static int CONST = 100;   // static final은 상수이므로 허용한다. 

      } 

      static class StaticInner { 
            int iv = 200; 
            static int cv = 200;       // static클래스만 static멤버를 정의할 수 있다. 
      } 

      void myMethod() { 
            class LocalInner { 
                  int iv = 300; 
//                  static int cv = 300;             // 에러 : static변수를 선언할 수 없다. 
                  final static int CONST = 300; 
            } 
      } 
     
} 



24. 컴파일 에러가 발생하는 부분을 표시하고, 이유를 설명하시오.

class Exam {
	private int outerIv = 0;
	static int outerCv = 0;

	class InstanceInner {
		int iiv = outerIv;  
		int iiv2 = outerCv;
	}

	static class StaticInner {
//		int siv = outerIv;  //error : 스태틱 클래스는 외부 클래스의 static 멤버만 접근할 수 있다.
		static int scv = outerCv;
	}

	void myMethod() {
		int lv = 0;
		final int LV = 0;

		class LocalInner {
			int liv = outerIv;
			int liv2 = outerCv;

//			int liv3 = lv;  //JDK 7.0 까지는 에러:외부 클래스의 지역변수는 final이 붙은 
					   //	변수(상수)만 접근가능하다.
			int liv4 = LV;
		}
	}
}


25. 내부 클래스의 객체 생성을 잘못한 곳을 표시하시오.

class Outer {
	class InstanceInner {
		int iv=100;
	}
	static class StaticInner {
		int iv=200;
		static int cv=300;
	}
}
class InnerEx4 {
	public static void main(String args[]) {
		Outer oc = new Outer();
		Outer.InstanceInner ii = new InstanceInner();  //(1) 
		System.out.println("ii.iv : "+ ii.iv);
		
		Outer.StaticInner si = new Outer.StaticInner();  //(2)
		System.out.println("si.iv : "+ si.iv);

		System.out.println("Outer.StaticInner.cv : " + Outer.StaticInner.cv);  //(3)
	}


Outer.InstanceInner ii = oc.new InstanceInner();  //(1) 


26. 출력 결과를 예측하시오.

class Outer {
	int value=100;					

	class Inner {
		int value=200;	
		void method1() {
			int value=300;
			System.out.println("           value :" + value);  //300
			System.out.println("      this.value :" + this.value); //200
			System.out.println("Outer.this.value :" + Outer.this.value); //100
		}
	} 
} 


27. 컴파일 에러가 발생하는 부분을 표시하고, 이유를 설명하시오.

class InnerEx2 {
	class InstanceInner {}
	static class StaticInner {}

	static void staticMethod() {
//		InstanceInner obj1 = new InstanceInner();	//error:static멤버는 인스턴스멤버에 직접 접근할 수 없다.
		StaticInner obj2 = new StaticInner();
	}

	void instanceMethod() {
		// 인스턴스메서드에서는 인스턴스멤버와 static멤버 모두 접근 가능하다.
		InstanceInner obj1 = new InstanceInner();
		StaticInner obj2 = new StaticInner();
	}
}


28. 익명 클래스란?
다른 내부 클래스와는 달리 이름이 없다
클래스의 선언과 객체의 생성을 동시에 하기 때문에 단 한번만 사용될 수 있고, 
오직 하나의 객체만을 생성할 수 있는 일회용 클래스이다.


29. 익명 클래스를 만드는 형식을 쓰시오.

new  부모클래스이름(){
	//멤버 선언
}
또는

new  구현인터페이스이름(){
	//멤버 선언
}


30. 아래 코드의 내부 클래스를 익명클래스로 변경하시오.

class Anonymous2 extends Frame{ 
	Button btn;	
	public Anonymous2(){
		btn=new Button("닫 기");
		add(btn,"South");
		btn.addActionListener(new EventHandler());
	} 

	class EventHandler implements ActionListener{
		public void actionPerformed(ActionEvent e) {
			System.exit(0);
		}
	}
}//class



---
class Anonymous extends Frame{ 
	Button btn;
	
	public Anonymous(){
		btn=new Button("닫 기");
		add(btn,"South");
		btn.addActionListener( new ActionListener(){
			public void actionPerformed(ActionEvent e){
					System.exit(0);
			}
		} );
	}
}

