[ java 11강 - 1차 테스트]

1. 환율 계산 클래스 만들기 - Exchange
[1] 메서드만 있는 클래스
	메서드 : 원화를 달러로 바꾸는 메서드
		   달러를 원화로 바꾸는 메서드
		   (1달러는 1136.50 원 => 상수로 선언)
	=> 결과를 리턴한다
[2] main() 에서 사용자로부터 원화, 달러를 입력 받아서
원화는 달러로, 달러는 원화로 바꾸는 메서드 호출한 후 결과를 출력한다
(소수이하 셋째자리에서 반올림할 것)


import java.util.Scanner;

class Exchange{
	double wonToDollor(double won) {
		final double dr = 1136.50;
		
		double dollor = 1/dr*won;
		return dollor;
	}
	
	double dollorToWon(double dollor) {
		final double dr = 1136.50;
		double won = dr*dollor;
		return won;
	}
}

public class Test1 {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		System.out.println("<1>원->달러  <2>달러->원 선택");
		int select = sc.nextInt();
		
		Exchange ex = new Exchange();
		if(select==1) {
			System.out.println("환전할 원을 입력");
			double won = sc.nextDouble();
			double exC1 = ex.wonToDollor(won);
			System.out.println(Math.round(exC1*1000)/1000.0);
		} else if(select==2) {
			System.out.println("환전할 달러를 입력");
			double dollor = sc.nextDouble();
			double exC2 = ex.dollorToWon(dollor);
			System.out.println(Math.round(exC2/1000)/1000.0);
		} else {
			System.out.println("잘못입력");
		}

	}

}


2.  다음 중 오버라이딩의 조건으로 옳지 않은 것은? (모두 고르시오)-> c, d
a. 조상의 메서드와 이름이 같아야 한다.o
b. 매개변수의 수와 타입이 모두 같아야 한다.o
c. 접근 제어자는 조상의 메서드보다 좁은 범위로만 변경할 수 있다.x
d. 조상의 메서드보다 더 많은 수의 예외를 선언할 수 있다.x


3. 다음 중 제어자 final을 붙일 수 있는 대상과 붙였을 때 그 의미를 적은 것이다. ->c
옳지 않은 것은? (모두 고르시오)
a. 지역변수 - 값을 변경할 수 없다.
b. 클래스 - 상속을 통해 클래스에 새로운 멤버를 추가할 수 없다.
c. 메서드 - 오버로딩을 할 수 없다. 
d. 멤버변수 - 값을 변경할 수 없다.


4. 다음 중 접근 제어자에 대한 설명으로 옳지 않은 것은? (모두 고르시오) ~>c
a. public은 접근제한이 전혀 없는 접근 제어자이다.
b. (default)가 붙으면, 같은 패키지 내에서만 접근이 가능하다.
c. 지역변수에도 접근 제어자를 사용할 수 있다.
d. protected가 붙으면, 같은 패키지 내에서도 접근이 가능하다.
e. protected가 붙으면, 다른 패키지의 자손 클래스에서 접근이 가능하다.


5. Math클래스의 생성자는 접근 제어자가 private이다. 그 이유는 무엇인가?
~>내부 변수를 마음대로 바꾸는 것을 막기 위해서


6. 다음의 코드를 컴파일하면 에러가 발생한다. 컴파일 에러가 발생하는 라인과 그
이유를 설명하시오.

~> 에러나는 부분 A B D
static 메서드에서 non-static 변수나 메서드를 바로 호출할수가 없다. (쓸려면 new 클래스이름() ~형식으로 클래스를 통해 불러야함)

class MemberCall {
	int iv = 10;
	static int cv = 20;
	int iv2 = cv;
	static int cv2 = iv; // 라인 A 

	static void staticMethod1() {
		System.out.println(cv);
		System.out.println(iv); // 라인 B 
	}
	void instanceMethod1() {
		System.out.println(cv);
		System.out.println(iv); // 라인 C
	}
	static void staticMethod2() {
		staticMethod1();
		instanceMethod1(); // 라인 D 
	}
	void instanceMethod2() {
		staticMethod1(); // 라인 E
		instanceMethod1();
	}
}



7. 다음 중 초기화에 대한 설명으로 옳지 않은 것은? (모두 고르시오) ~>d
a.멤버변수는 자동 초기화되므로 초기화하지 않고도 값을 참조할 수 있다.
b.지역변수는 사용하기 전에 반드시 초기화해야 한다.
c.명시적 초기화를 제일 우선적으로 고려해야 한다.
d.클래스변수보다 인스턴스변수가 먼저 초기화된다.


8. 다음중 인스턴스변수의 초기화 순서가 올바른 것은? ~>a
a. 기본값-명시적초기화-생성자
b. 생성자-기본값-명시적초기화
c. 기본값-생성자-명시적초기화
d. 명시적초기화-기본값-생성자


9. 호출스택이 다음과 같은 상황일 때 옳지 않은 설명은? (모두 고르시오) ~>d, f
--------
println
--------
method1
--------
method2
--------
main
--------

a. 제일 먼저 호출스택에 저장된 것은 main메서드이다.
b. println메서드를 제외한 나머지 메서드들은 모두 종료된 상태이다.
c. method2메서드를 호출한 것은 main메서드이다.
d. println메서드가 종료되면 method1메서드가 수행을 재개한다.
e. main-method2-method1-println의 순서로 호출되었다.
f. 현재 실행중인 메서드는 println 뿐이다.


10. 다음 중 생성자에 대한 설명으로 옳지 않은 것은? (모두 고르시오) ~>e
a. 모든 생성자의 이름은 클래스의 이름과 동일해야한다.
b. 생성자는 객체를 생성하기 위한 것이다.   ~~~>> no!! 멤버변수를 초기화 하기 위함
c. 클래스에는 생성자가 반드시 하나 이상 있어야 한다.
d. 생성자가 없는 클래스는 컴파일러가 기본 생성자를 추가한다.
e. 생성자는 오버로딩 할 수 없다.

11. 다음 중 this에 대한 설명으로 맞지 않은 것은? (모두 고르시오) ~>d
a. 객체 자신을 가리키는 참조변수이다.
b. 클래스 내에서라면 어디서든 사용할 수 있다. 
c. 지역변수와 인스턴스변수를 구별할 때 사용한다.
d. 클래스 메서드 내에서는 사용할 수 없다.

12. 다음 중 오버로딩이 성립하기 위한 조건이 아닌 것은? (모두 고르시오) ~> d
a. 메서드의 이름이 같아야 한다.
b. 매개변수의 개수나 타입이 달라야 한다.
c. 리턴타입이 달라야 한다.
d. 매개변수의 이름이 달라야 한다.

13. 다음 중 아래의 add메서드를 올바르게 오버로딩 한 것은? (모두 고르시오) ~>a뻬고 다
long add(int a, int b) { return a+b;}
a. long add(int x, int y) { return x+y;}
b. long add(long a, long b) { return a+b;}
c. int add(byte a, byte b) { return a+b;}
d. int add(long a, int b) { return (int)(a+b);}

14. 다음 중 지역변수에 대한 설명으로 옳지 않은 것은? (모두 고르시오)~>
a. 자동 초기화되므로 별도의 초기화가 필요없다.
b. 지역변수가 선언된 메서드가 종료되면 지역변수도 함께 소멸된다.
c. 매서드의 매개변수로 선언된 변수도 지역변수이다.
d. 클래스변수나 인스턴스변수보다 메모리 부담이 적다.
e. 힙(heap)영역에 생성되며 가비지 컬렉터에 의해 소멸된다.


15.  코드를 완성하시오.

class Card{
	private final int KIND;  // 카드 무늬의 수 1~4
	private final int NUMBER;  // 무늬별 카드 수(카드의 숫자) 1~10,  J, Q, K

	private static final int SPADE=1;
	private static final int DIAMOND=2;
	private static final int HEART=3;
	private static final int CLOVER=4;

	public static final int MAX_KIND=4;
	public static final int MAX_NUMBER=13;
	
	Card(int kind, int number){
		this.KIND=kind;
		this.NUMBER=number;
	}
		
	public String findInfo(){
		String kind="", number="";
		switch (KIND){
			case SPADE:
				kind="SPADE";break;
			case DIAMOND:
				kind="DIAMOND";break;
			case HEART:
				kind="HEART";break;
			case CLOVER:
				kind="CLOVER";break;
		}
		switch (NUMBER){
			case 11:
				number="J";break;
			case 12:
				number="Q";break;
			case 13:
				number="K";break;
			default:
				number=NUMBER+"";
		}		
		return "card[kind="+ kind +", number="+ number+"]";	  //SPADE, K
	}
}


//카드 한벌 - 52장의 카드를 갖는 클래스
class Deck{
	private static final int CARD_NUM=52;  //카드의 개수	
	private	Card[] cardList = new Card[CARD_NUM]; //카드 52장을 담는 배열
	private int count;

	Deck(){
		//(1) 카드 52장을 초기화하시오. (cardList 배열에 요소 넣기)
		for (int i=1;i<= Card.MAX_KIND;i++ ){  
			for (int j=1;j<=Card.MAX_NUMBER ; j++){ 
				Card c = new Card(i, j); 
				cardList[count++] = c; 
				} 
			}
	} 
		

	//(2) cardList 멤버변수에 대한 getter를 만드시오.
	public Card[] getCardList(){ 
		return cardList; 
		}


	
	//(3) 임의의 카드 한 장을 뽑는 메서드를 만드시오.  pick()
	public Card pick(int idx){ 
		Card c=null; 
		if (idx<0 || idx>=CARD_NUM){ 
			c=pick(); 
			}else{ 
				c = cardList[idx]; } 
		return c; }
	 public Card pick(){ 
		 int rnd = (int)(Math.random()*52);   
		 Card c = cardList[rnd];   
		 return c; 
		 }
	

	//(4)  카드의 순서를 섞는 메서드를 완성하시오.
	public void shuffle(){
		for (int i=0;i<1000 ;i++ ){
			//카드 한 벌의 첫 번째 장과 임의로 선택한 위치에 있는 카드의 위치를 서로 바꾸는 방식
			int rnd = (int)(Math.random()*52); 
			//0번째 배열의 값과 서로 맞바꾸기
			Card temp = cardList[0]; 
			cardList[0] = cardList[rnd]; 
			cardList[rnd] = temp;
		}//for
	}
}//class

class CardTest {
	public static void main(String[] args) {
		Deck d = new Deck();  //카드 한 벌 만들기
		
		//(5) 카드 한 벌 출력하기
		System.out.println("\n\n----카드 한벌----"); 
		Card[] cardArr = d.getCardList(); 
		for (Card card : cardArr){ 
			System.out.println(card.findInfo()); 
			}


		//카드 섞기
		d.shuffle();

	}
}



16. Test 클래스를 만들고, 아래 두 메서드를 만드시오.

1. 메서드 만들기 
[1] 어학 평가 등급에 따라 가산점을 구한 후 가산점을 리턴하는 메서드 만들기
- 어학 평가 등급이 1급이면 3점, 2급이면 2점, 3급이면 1점, 4급이면 벌점 -1점을 가산점으로 부여한다

main() 에서 사용자로부터 어학 평가 등급을 입력받아서
가산점을 구하는 메서드를 호출한 후 결과를 출력한다.

(평가등급은 문자열, 가산점은 숫자로 처리할 것)

public class TestTest2 {
	static int showBonus(String score){
		switch(score){
			case "1": 
				return 3; 
			case "2": 
				return 2; 
			case "3": 
				return 1; 
			case "4": 
				return -1;
			default:
				return 0;
		}
	}

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		System.out.println("");
		String score = sc.nextLine();
		
		int a = showBonus(score);
		System.out.println(a+"점 ");
	}

}

[2] 1부터 40까지의 정수 중에서 4의 배수이거나 5의 배수인 정수의 총합을 구하여 결과값을 리턴하는 메서드 만들기
=> 4+5+8+10+12+15+16+20+24+...+40

main() 에서 총합을 구하는 메서드를 호출하여 결과를 출력한다

public class TestTest3 {
	
	static int sumFF() {
		int sum = 0;
		for(int i=0; i<41; i++) {
			if(i%4==0 && i%5==0) {
				sum += i;
			} else if (i%4==0) {
				sum+=i;
			} else if (i%5==0) {
				sum += i;
			}
		}
		return sum;
	}
	public static void main(String[] args) {
		System.out.println(sumFF());

	}

}


2. 학생 7명의 점수의 총점을 구하려고 한다.
main()에서 7개의 정수를 요소로 갖는 배열을 만들고,
random 메서드를 이용해서 0~100 사이의 정수를 배열에 넣는다.
배열의 값의 총합을 구한 후, 
확장 for문을 이용하여 배열의 값(점수)을 출력하고, 총합도 출력한다.

public class TestTest4 {

	public static void main(String[] args) {
		int[] arr = new int[7];
		int sum = 0;
		for(int i=0; i<arr.length; i++) {
			arr[i] = (int)(Math.random()*100+1);
			sum += arr[i];
		}
		
		for(int n : arr) {
			System.out.println(n);
		}
		System.out.println("총합:"+sum);

	}

}
